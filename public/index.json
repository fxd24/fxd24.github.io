
[{"content":"I\u0026rsquo;m David Graf, a Swiss software engineer with a passion for turning complex problems into elegant solutions. With 6+ years of professional software development experience and 3+ years specializing in LLM-powered knowledge systems, I bridge the gap between cutting-edge AI research and practical applications that customers actually want.\nWhat Drives Me # Unlike many engineers who prefer staying in their technical comfort zone, I thrive on diving deep with users and customers to truly understand their challenges. I believe the best solutions come from this intersection of technical expertise and real-world problem understanding. I\u0026rsquo;m always ready to learn whatever it takes to deliver results that matter.\nMy Expertise # I specialize in building AI-powered knowledge management systems that extract meaningful insights from complex, unstructured data. My work focuses on:\nKnowledge Graphs \u0026amp; Graph Neural Networks - Building intelligent systems that understand relationships and connections in data Large Language Models - Integrating LLMs into production systems for real-world applications Semantic Search \u0026amp; Recommendation Systems - Creating advanced search solutions that deliver highly relevant results Research \u0026amp; Trend Analysis - Developing ML systems that identify emerging patterns and opportunities Production ML Systems - Taking prototypes to scalable, robust production deployments Recent Highlight # I built the Research Topic Launcher for a leading scientific publisher - an end-to-end ML system that revolutionized how they discover research trends and identify experts among 200+ million papers. The system reduced discovery time from weeks to minutes, with over 90% user preference rate compared to previous manual methods.\nThe project combined custom knowledge graphs, embedding models, and LLM-powered analysis to create capabilities that didn\u0026rsquo;t exist before. It\u0026rsquo;s exactly the kind of challenge I love: no clear existing solution, requiring innovation under uncertainty, and delivering measurable business value.\nTechnical Foundation # My technical toolkit spans the full ML lifecycle:\nMachine Learning: PyTorch, scikit-learn, embedding models, recommendation systems Knowledge Graphs: Neo4j, NetworkX, graph algorithms, dynamic graph generation LLM Integration: OpenAI API, prompt engineering, evaluation frameworks Data Engineering: Google BigQuery, Dagster, large-scale data processing MLOps: Azure ML Studio, MLFlow, Docker, Terraform, CI/CD pipelines Background # I hold a Master\u0026rsquo;s in Computer Science from ETH Zürich, where I specialized in knowledge graphs and graph neural networks. My thesis work was conducted in collaboration with IBM Research, giving me early exposure to industry-academic collaboration.\nI\u0026rsquo;m multilingual (Italian, English, German, French, and some Macedonian) and have experience working with international teams. I completed my military service as an officer in the Swiss Army, which taught me valuable lessons about leadership and working under pressure.\nWhat I\u0026rsquo;m Looking For # I\u0026rsquo;m currently seeking opportunities where I can apply my expertise in LLMs and knowledge graphs to solve meaningful problems. I\u0026rsquo;m particularly interested in:\nAI-powered knowledge management platforms Intelligent search and recommendation systems RAG and knowledge-enhanced AI applications Agent-based AI solutions for complex knowledge work Research and development in emerging AI technologies Let\u0026rsquo;s Connect # I believe in the power of knowledge sharing and collaboration. Whether you\u0026rsquo;re working on similar challenges, looking to explore new AI applications, or just want to discuss the latest developments in ML and knowledge graphs, I\u0026rsquo;d love to connect.\nFeel free to reach out through any of my channels, or explore my projects on GitHub and posts on my website to see my work in action.\n\u0026ldquo;The best solutions emerge when technical expertise meets deep understanding of real-world problems.\u0026rdquo;\n","date":"3 July 2025","externalUrl":null,"permalink":"/about/","section":"David's Universe","summary":"","title":"About Me","type":"page"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/","section":"David's Universe","summary":"","title":"David's Universe","type":"page"},{"content":" From Zero to Live: Publishing Your Hugo Website with Blowfish and GitHub Pages # Building and deploying a modern static website doesn\u0026rsquo;t have to be complicated. In this comprehensive guide, I\u0026rsquo;ll walk you through the entire process of creating a Hugo website using the Blowfish theme and publishing it to GitHub Pages with a custom domain. This is exactly the setup I used for my own website, including the gotchas and solutions I discovered along the way.\nIntroduction # Static site generators have revolutionized how we build websites. Hugo, being one of the fastest and most flexible options, paired with the beautiful Blowfish theme, creates an excellent foundation for personal websites, blogs, and portfolios. Combined with GitHub Pages for hosting, you get a completely free, fast, and reliable web presence.\nWhat you\u0026rsquo;ll learn in this guide:\nSetting up Hugo and Blowfish theme using the new CLI tool Understanding Hugo\u0026rsquo;s content structure and configuration Configuring menus and navigation Deploying to GitHub Pages with custom domains Troubleshooting common deployment issues Requirements # Before we start, you\u0026rsquo;ll need to install several tools. Since I\u0026rsquo;m using macOS with Homebrew, I\u0026rsquo;ll provide those instructions, but similar packages are available for other platforms.\nEssential Tools # 1. Install Go\nbrew install go Verify installation:\ngo version 2. Install Hugo\nbrew install hugo Make sure you have Hugo 0.87.0 or later:\nhugo version 3. Install Git\nbrew install git 4. Install Node.js (for Blowfish CLI)\nbrew install node 5. Install Blowfish CLI Tool\nnpm install -g blowfish-tools Optional but Recommended # A GitHub account for hosting A custom domain (optional, but we\u0026rsquo;ll cover setup) Setting Up Your Hugo Site with Blowfish # The Empty Folder Requirement # Here\u0026rsquo;s an important detail I discovered: The Blowfish CLI tool requires an empty folder to work properly. If you already have a GitHub repository set up with README files, you\u0026rsquo;ll need to start fresh or work around this limitation.\nI\u0026rsquo;ve actually created an issue with the Blowfish team to improve this, but for now, the best approach is to start with a completely empty directory.\nCreating Your Site # 1. Create and navigate to an empty directory:\nmkdir fxd24.github.io cd fxd24.github.io In your case, replace fxd24.github.io with your desired repository name. This will be the root of your Hugo site.\n2. Run the Blowfish CLI tool:\nblowfish-tools new The CLI will guide you through an interactive setup process, asking about:\nSite name and description Author information Color scheme preferences Features you want to enable 3. If you need to connect to an existing GitHub repository:\ngit remote add origin https://github.com/fxd24/fxd24.github.io.git Make sure to replace the URL with your own repository link.\nUnderstanding Hugo Content Structure # Hugo organizes content in a specific way that\u0026rsquo;s important to understand:\nThe Content Directory # All your website content goes in the content/ folder. Hugo is flexible with structure - you can use simple files or bundle directories depending on your needs:\ncontent/ ├── about.md # Simple page ├── posts/ │ ├── hugo-website-publishing/ │ │ ├── index.md │ │ └── featured.png # Thumbnail image │ ├── simple-post.md # Simple post without folder │ └── another-post/ │ ├── index.md │ └── featured.jpg └── _index.md # Homepage content Adding Content # 1. Create an About page (simple file):\nhugo new about.md 2. Create blog posts (two approaches):\n# Simple post (single file) hugo new posts/my-simple-post.md # Post bundle (with images and resources) hugo new posts/my-complex-post/index.md Note: You can also create files directly using any code editor of your preference.\n3. Add featured images: To add a thumbnail image to any post or page:\nFor single files: place featured.png (or .jpg) in the same directory as your content file For bundles: place featured.png in the same directory as your index.md Front Matter Configuration # Each content file starts with front matter that controls how the page behaves:\n--- title: \u0026#34;Your Page Title\u0026#34; date: 2025-07-03 draft: false tags: [\u0026#34;hugo\u0026#34;, \u0026#34;web-development\u0026#34;] categories: [\u0026#34;tutorials\u0026#34;] --- Key fields:\ntitle: The page title date: Publication date draft: Set to true to hide from published site tags and categories: For organization and filtering Configuration # Hugo uses configuration files to control your site\u0026rsquo;s behavior. Blowfish uses multiple configuration files for organization:\nMain Configuration Files # config/_default/ ├── hugo.toml # Main Hugo settings ├── languages.en.toml # Language-specific settings ├── markup.toml # Markdown processing settings ├── menus.en.toml # Navigation menu configuration └── params.toml # Theme-specific parameters Important: When using the Blowfish CLI there will be also a hugo.toml file in the root directory. That file needs to be deleted.\nKey Configuration Areas # Site Information (hugo.toml):\nbaseURL = \u0026#34;https://grafdavid.com\u0026#34; # Replace with your domain languageCode = \u0026#34;en\u0026#34; title = \u0026#34;David\u0026#39;s Universe\u0026#34; # Replace with your site title theme = \u0026#34;blowfish\u0026#34; Theme Parameters (params.toml):\n# Site appearance colorScheme = \u0026#34;auto\u0026#34; defaultAppearance = \u0026#34;dark\u0026#34; # Homepage layout homepage.layout = \u0026#34;profile\u0026#34; # Social links [author] name = \u0026#34;Your Name\u0026#34; headline = \u0026#34;Your Headline\u0026#34; bio = \u0026#34;Your bio description\u0026#34; Creating Navigation Menus # Navigation is configured in menus.en.toml. Here\u0026rsquo;s how to set up your menu items:\n[[main]] name = \u0026#34;About Me\u0026#34; # Display name in menu pageRef = \u0026#34;about\u0026#34; # References about.md file weight = 10 [[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 20 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 # Footer menu [[footer]] name = \u0026#34;Privacy\u0026#34; pageRef = \u0026#34;privacy\u0026#34; weight = 10 Important: The pageRef should match your content file name (without extension). For example:\nabout.md → pageRef = \u0026quot;about\u0026quot; posts/my-post.md → pageRef = \u0026quot;posts/my-post\u0026quot; The weight parameter controls the order (lower numbers appear first), and name is what visitors see in the menu.\nPublishing to GitHub Pages # This is where I encountered some challenges. The Blowfish documentation includes a GitHub Actions workflow, but it didn\u0026rsquo;t work as expected for me. Instead, I followed Hugo\u0026rsquo;s official deployment instructions.\nSetting Up GitHub Repository # 1. Create a new repository on GitHub\nRepository name: fxd24.github.io (replace fxd24 with your GitHub username for user pages) or any name (for project pages) Make it public Don\u0026rsquo;t initialize with README if using existing local repository 2. Push your code:\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main GitHub Actions Workflow # Create .github/workflows/hugo.yaml (note: use .yaml extension):\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to GitHub Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.147.2 HUGO_ENVIRONMENT: production TZ: Europe/Zurich steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Cache Restore id: cache-restore uses: actions/cache/restore@v4 with: path: | ${{ runner.temp }}/hugo_cache key: hugo-${{ github.run_id }} restore-keys: hugo- - name: Configure Git run: git config core.quotepath false - name: Build with Hugo run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; \\ --cacheDir \u0026#34;${{ runner.temp }}/hugo_cache\u0026#34; - name: Cache Save id: cache-save uses: actions/cache/save@v4 with: path: | ${{ runner.temp }}/hugo_cache key: ${{ steps.cache-restore.outputs.cache-primary-key }} - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 This is the working configuration I use for my own site. You can find the latest version at: https://github.com/fxd24/fxd24.github.io/blob/main/.github/workflows/hugo.yaml Enabling GitHub Pages # 1. Go to your repository settings 2. Navigate to Pages section 3. Select \u0026ldquo;GitHub Actions\u0026rdquo; as the source 4. The workflow will automatically trigger on the next push\nSetting Up Custom Domain # If you want to use a custom domain (like I did with grafdavid.com), here\u0026rsquo;s how:\nDNS Configuration # In your domain registrar, add these DNS records:\nType: CNAME Name: www Value: fxd24.github.io Type: A Name: @ Values: 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 In your GitHub repository, go to Settings → Pages and add your custom domain (e.g., grafdavid.com) in the \u0026ldquo;Custom domain\u0026rdquo; field.\nGitHub Configuration # 1. In your repository settings, go to Pages 2. Add your custom domain in the \u0026ldquo;Custom domain\u0026rdquo; field 3. Wait for DNS verification (can take up to 24 hours) 4. Enable \u0026ldquo;Enforce HTTPS\u0026rdquo; once verification is complete\nDomain Verification # To verify your custom domain on GitHub: 1. Go to GitHub Settings → Pages 2. Add your domain to \u0026ldquo;Verified domains\u0026rdquo; 3. GitHub will provide a TXT record to add to your DNS 4. Add the TXT record and wait for verification\nTesting Your Site # Before publishing, always test locally:\n# Start development server hugo server --disableFastRender --noHTTPCache # Build for production hugo --minify Visit http://localhost:1313 to preview your site or any other port that hugo is serving the website onto.\nConclusion # Setting up a Hugo website with Blowfish and GitHub Pages creates a powerful, fast, and free web presence. While there are a few gotchas (like the empty folder requirement and workflow issues), the end result is a beautiful, performant website that\u0026rsquo;s easy to maintain.\nThe combination of Hugo\u0026rsquo;s speed, Blowfish\u0026rsquo;s aesthetics, and GitHub Pages\u0026rsquo; reliability makes this an excellent choice for personal websites, portfolios, and blogs. Once set up, you can focus on creating content while the infrastructure handles itself.\nRemember to keep your Hugo version updated and periodically update the Blowfish theme to get the latest features and security improvements.\nNext Steps # Now that your site is live enjoy spreading your expertise and knowledge with the world!\nFriction Log # Feel free to contact me or open an issue on GitHub if you encounter any problems or have suggestions for improvements. I love to minimize friction to deliver better experiences. Here are some common issues I faced and their solutions:\n1. Blowfish CLI Empty Folder Issue # Problem: CLI fails when folder contains existing files Solution: Start with completely empty folder, then add git remote\n2. GitHub Actions Workflow Failure # Problem: Blowfish\u0026rsquo;s provided workflow doesn\u0026rsquo;t work Solution: Use Hugo\u0026rsquo;s official GitHub Actions workflow (provided above)\n3. Images Not Displaying # Problem: Featured images don\u0026rsquo;t show up Solution: Ensure images are named featured.png or featured.jpg and placed in the same directory as index.md\n","date":"3 July 2025","externalUrl":null,"permalink":"/posts/hugo_blowfish_website/","section":"Posts","summary":"","title":"From Zero to Live: Publishing Your Hugo Website with Blowfish and GitHub Pages","type":"posts"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/github-pages/","section":"Tags","summary":"","title":"Github-Pages","type":"tags"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/static-site/","section":"Tags","summary":"","title":"Static-Site","type":"tags"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/categories/tutorials/","section":"Categories","summary":"","title":"Tutorials","type":"categories"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/categories/web-development/","section":"Categories","summary":"","title":"Web-Development","type":"categories"},{"content":"","date":"3 July 2025","externalUrl":null,"permalink":"/tags/web-development/","section":"Tags","summary":"","title":"Web-Development","type":"tags"},{"content":"","date":"28 June 2025","externalUrl":null,"permalink":"/tags/cheatsheet/","section":"Tags","summary":"","title":"CheatSheet","type":"tags"},{"content":"","date":"28 June 2025","externalUrl":null,"permalink":"/cheatsheets/","section":"Cheatsheets","summary":"","title":"Cheatsheets","type":"cheatsheets"},{"content":"","date":"28 June 2025","externalUrl":null,"permalink":"/tags/ml/","section":"Tags","summary":"","title":"ML","type":"tags"},{"content":"","date":"28 June 2025","externalUrl":null,"permalink":"/tags/mlflow/","section":"Tags","summary":"","title":"MLFlow","type":"tags"},{"content":"This cheat sheet provides a quick reference for using MLFlow, a popular open-source platform for managing the machine learning lifecycle.\nTracking # Basic Tracking # import mlflow with mlflow.start_run(): mlflow.log_param(\u0026#34;param1\u0026#34;, 1) mlflow.log_metric(\u0026#34;metric1\u0026#34;, 0.87) Tracking with a specific run name # import mlflow with mlflow.start_run(run_name=\u0026#34;My_Awesome_Run\u0026#34;): mlflow.log_param(\u0026#34;param1\u0026#34;, 1) mlflow.log_metric(\u0026#34;metric1\u0026#34;, 0.87) Tracking with a specific experiment # import mlflow mlflow.set_experiment(\u0026#34;My_New_Experiment\u0026#34;) with mlflow.start_run(): mlflow.log_param(\u0026#34;param1\u0026#34;, 1) mlflow.log_metric(\u0026#34;metric1\u0026#34;, 0.87) Logging multiple metrics/params # import mlflow with mlflow.start_run(): mlflow.log_params({\u0026#34;param1\u0026#34;: 1, \u0026#34;param2\u0026#34;: \u0026#34;value\u0026#34;}) mlflow.log_metrics({\u0026#34;metric1\u0026#34;: 0.87, \u0026#34;metric2\u0026#34;: 0.13}) Logging artifacts (files) # import mlflow import os # Create a dummy file with open(\u0026#34;my_artifact.txt\u0026#34;, \u0026#34;w\u0026#34;) as f: f.write(\u0026#34;Hello, MLFlow!\u0026#34;) with mlflow.start_run(): mlflow.log_artifact(\u0026#34;my_artifact.txt\u0026#34;) # You can also log to a specific artifact path within the run mlflow.log_artifact(\u0026#34;my_artifact.txt\u0026#34;, artifact_path=\u0026#34;data\u0026#34;) os.remove(\u0026#34;my_artifact.txt\u0026#34;) ","date":"28 June 2025","externalUrl":null,"permalink":"/cheatsheets/mlflow/","section":"Cheatsheets","summary":"","title":"MLFlow CheatSheet","type":"cheatsheets"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]